#!/bin/bash

if [[ $EUID -ne 0 ]]; then
    echo "You must be root to run poc"
    exit 1
fi

PROJECT_PATH=/var/lib/poc_container

IMAGES_PATH=$PROJECT_PATH/overlay
MOUNTPOINTS_PATH=$PROJECT_PATH/mnt
META_PATH=$PROJECT_PATH/meta

GLOBAL_DEFAULT_IP=$META_PATH/default_ip
GLOBAL_HOST_IP=$META_PATH/host_ip

GLOBAL_DEFAULT_START_IP="10.200.1.1"
GLOBAL_HOST_START_IP="10.100.1.1"

MASK="16"
CONTAINER_MASK="24"

ROOTFS_ARCHIVE_PATH=$PROJECT_PATH/rootfs.tar

VIRTUAL_BRIDGE_NAME="pocbr0"

# IP increment/decrement function based on
# https://stackoverflow.com/questions/33056385/increment-ip-address-in-a-shell-script
next_ip_addr() {
    local ip=$1
    local add=$2

    local ip_hex=$(printf '%.2X%.2X%.2X%.2X\n' `echo $ip | sed -e 's/\./ /g'`)
    local next_ip_hex=$(printf %.8X `echo $(( 0x$ip_hex + $2 ))`)
    next_ip=$(printf '%d.%d.%d.%d\n' `echo $next_ip_hex | sed -r 's/(..)/0x\1 /g'`)
    echo "$next_ip"
}

build_rootfs_archive () {
    local image_name=$(whoami)/ubuntu_sysbench

    # Build docker image with included sysbench
    docker build ./ -t $image_name

    # Get image id
    local format="{{.Repository}} {{.ID}}"
    local image_id=$(docker images --format="$format" | grep $image_name | awk '{print $2}')

    # Export rootfs to archive
    local container_id=$(docker create $image_id)
    docker export $container_id -o $ROOTFS_ARCHIVE_PATH

    # Remove image and container
    docker container rm $container_id
    docker image rm $image_id
}

setup_isolated_iface () {
    ip link add $VIRTUAL_BRIDGE_NAME type bridge
    ifconfig $VIRTUAL_BRIDGE_NAME $GLOBAL_HOST_START_IP up

    echo "Virtual bridge $VIRTUAL_BRIDGE_NAME has been initialized"
}

remove_isolated_iface () {
    ifconfig $VIRTUAL_BRIDGE_NAME $GLOBAL_HOST_START_IP down
    ip link del dev $VIRTUAL_BRIDGE_NAME

    echo "Virtual bridge $VIRTUAL_BRIDGE_NAME has been removed"
}

prepare_project () {
    mkdir -p $PROJECT_PATH $IMAGES_PATH $MOUNTPOINTS_PATH $META_PATH
    build_rootfs_archive
    setup_isolated_iface

    # Initialize global IPs of the containers, they will increment
    # when a new container starts, and decrement if stops
    echo $GLOBAL_DEFAULT_START_IP > $GLOBAL_DEFAULT_IP
    echo $GLOBAL_HOST_START_IP > $GLOBAL_HOST_IP
}

setup_loop_fs () {
    local image_path=$IMAGES_PATH/$1.img
    local mountpoint_path=$MOUNTPOINTS_PATH/$1
    local size=$3

    if [[ -z $1 ]]; then
        echo "Invalid container name: '$1'"
        return
    fi

    if [[ -f $image_path ]]; then
        echo "Container '$1' already exists"
        return
    fi

    if [[ "$2" != "disk-size" ]]; then
        echo "Invalid argument '$2'. Expected 'disk-size <size>'"
        return
    fi

    if [[ -z $3 ]]; then
        echo "Container filesystem size is not specified. Use '20G' for example."
        return
    fi

    # Create an empty file which will be associated with loop device
    fallocate -l $size $image_path

    # Create a loop device
    loop_device=$(losetup -fP --show $image_path)

    # Create EXT4 filesystem inside the loop device
    mkfs.ext4 $loop_device &> /dev/null

    # Mount loop device
    mkdir -p $mountpoint_path
    mount -t ext4 $loop_device $mountpoint_path

    # Copy rootfs contents to mountpoint
    tar -xf $ROOTFS_ARCHIVE_PATH -C $mountpoint_path

    # Track container status, beginning from 'stopped'
    local status=$META_PATH/$1
    echo "stopped" > $status
}

remove_loop_fs () {
    local image_path=$IMAGES_PATH/$1.img
    local mountpoint_path=$MOUNTPOINTS_PATH/$1
    local status=$META_PATH/$1

    if [[ ! -f $image_path ]]; then
        echo "No image/container '$1' exists"
        return
    fi

    # Remove status
    rm -f $status

    # Get loop device by image name
    # Cuts '/dev/loop0' from '/dev/loop0: []: (/var/lib/poc_container/overlay/test_loop.img)'
    loop_device=$(losetup -j $image_path | awk -F: '{print $1}')

    # Umount and remove loop device
    umount $loop_device
    losetup -D $loop_device

    rm -rf $image_path $mountpoint_path
    echo "Removed: $1"
}

remove_project () {
    local entries=( $(ls $MOUNTPOINTS_PATH) )

    for entry in "${entries[@]}"; do
        remove_loop_fs $(basename $entry)
    done

    # Cleanup iptables
    iptables -t nat -F
    iptables -P FORWARD DROP
    iptables -F FORWARD

    rm -rf $PROJECT_PATH
    remove_isolated_iface
}

list_filesystem () {
    local entries=( $(ls $MOUNTPOINTS_PATH) )

    local content="NAME DEVICE MOUNTPOINT STATUS"

    for entry in "${entries[@]}"; do
        entry=$(basename $entry)

        local image_path=$IMAGES_PATH/$entry.img
        local loop_device=$(losetup -j $image_path | awk -F: '{print $1}')
        local mountpoint=$MOUNTPOINTS_PATH/$entry
        local status=$(cat $META_PATH/$entry | xargs)

        local line=$(echo -e "$entry $loop_device $mountpoint $status")
        content="$content\n$line"
    done

    echo -e $content | column -t
}

run_container () {
    local iface=""
    local veth_addr=""
    local vpeer_addr=""

    local ip_file=$GLOBAL_DEFAULT_IP

    local image_path=$IMAGES_PATH/$2.img
    local mountpoint_path=$MOUNTPOINTS_PATH/$2

    if [[ -z $2 ]]; then
        echo "Invalid image/container name: '$2'"
        return
    fi

    if [[ ! -f $image_path ]]; then
        echo "Image '$2' does not exist"
        return
    fi

    if [[ ! -d $mountpoint_path ]]; then
        echo "Container '$2' does not exist"
        return
    fi

    # Build container command with proc and sys mounts
    local cmd="${@:3}"
    local set_path="export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    local mount_proc="mount -t proc proc /proc"
    local mount_sys="mount -t sysfs sys /sys"
    local container_cmd="$set_path ; $mount_proc && $mount_sys && $cmd"

    # Create a cgroup with default settings
    local cgroups="cpu,memory"
    cgcreate -g "$cgroups:$2"

    if [[ "$1" == "net-default" ]]; then
        iface=$(route | grep "^default" | grep -o '[^ ]*$')
        ip_file=$GLOBAL_DEFAULT_IP
        echo "Using default bridge: $iface"
    elif [[ "$1" == "net-host" ]]; then
        iface=$VIRTUAL_BRIDGE_NAME
        ip_file=$GLOBAL_HOST_IP
        echo "Using virtual bridge: $iface"
    elif [[ "$1" == "net-disabled" ]]; then
        # Update container status
        local status=$META_PATH/$2
        echo "running" > $status

        # Run container
        cgexec -g "$cgroups:$2" \
            unshare --net --fork --mount --pid --ipc --mount-proc \
            chroot $mountpoint_path /bin/bash -c "$container_cmd" || true

        echo "Container '$2' exited. Cleanup"

        # Cleanup
        cgdelete "$cgroups:$2"

        # Update container status
        status=$META_PATH/$2
        echo "stopped" > $status

        return
    else
        echo "Invalid network settings, use either 'net-default' or 'net-host'"
        return
    fi

    local current_global_ip=$(cat $ip_file | xargs)

    veth_addr=$(next_ip_addr $current_global_ip 256)
    vpeer_addr=$(next_ip_addr $current_global_ip 257)

    # Update global IP
    echo $veth_addr > $ip_file

    echo "Veth IP: $veth_addr, Vpeer IP: $vpeer_addr Global IP: $(cat $ip_file | xargs)"

    local veth="veth0_$2"
    local vpeer="vpeer1_$2"
    local network_ns_name="netns_$2"

    # Create network namespace
    ip netns add $network_ns_name

    # Create veth-vpeer linkage
    ip link add $veth type veth peer name $vpeer

    # Set up isolated network namespace for vpeer
    ip link set $vpeer netns $network_ns_name

    # Setup $veth IP
    ip addr add $veth_addr/$CONTAINER_MASK dev $veth
    ip link set $veth up

    # Setup $vpeer IP and route
    ip netns exec $network_ns_name ip addr add $vpeer_addr/$CONTAINER_MASK dev $vpeer

    # Set up interfaces in isolated network namespace
    ip netns exec $network_ns_name ip link set lo up
    ip netns exec $network_ns_name ip link set $vpeer up

    # Set up routing in isolated network namespace
    ip netns exec $network_ns_name ip route add default via $veth_addr

    # Enable IP-forwarding
    echo 1 > /proc/sys/net/ipv4/ip_forward
    
    # Enable masquerading
    iptables -t nat -A POSTROUTING -s $vpeer_addr/$CONTAINER_MASK -o $iface -j MASQUERADE
    
    # Set up NAT forwarding
    iptables -A FORWARD -i $iface -o $veth -j ACCEPT
    iptables -A FORWARD -o $iface -i $veth -j ACCEPT

    # Set up DNS
    echo "nameserver 8.8.8.8" > $mountpoint_path/etc/resolv.conf

    echo "Network has been configured."

    # Update container status
    local status=$META_PATH/$2
    echo "running" > $status

    # Run container
    cgexec -g "$cgroups:$2" \
        ip netns exec $network_ns_name \
        unshare --fork --mount --pid --ipc --mount-proc \
        chroot $mountpoint_path /bin/bash -c "$container_cmd" || true

    echo "Container '$2' exited. Cleanup"

    # Cleanup
    cgdelete "$cgroups:$2"
    ip link del dev $veth
    ip netns del $network_ns_name

    # Update global IP
    current_global_ip=$(cat $ip_file | xargs)
    current_global_ip=$(next_ip_addr $current_global_ip -256)
    echo "$current_global_ip" > $ip_file

    # Update container status
    status=$META_PATH/$2
    echo "stopped" > $status
}

print_help () {
    echo -e \
"Usage:  poc COMMAND [ARG...]

\"Proof Of \e[9mConcept\e[0m Container\" runtime written in Bash.
Author: dmfrpro <Dmitrii Alekhin>

COMMANDS:
    init                            - Initialize the project directories and pull base rootfs image
        Example: poc init

    prune                           - Remove everything and uninstall
        Example: poc prune

    build <name> disk-size <size>   - Build (but not start) named container of disk size <size> gigabytes.
                                      Size should in a format like '20G'
        Example: poc build test0 disk-size 20G

    run <net-type> <name> <cmd...>  - Run a command inside a container (need to build it for the first time)
                                      
                                      <net-type> must be one of 3 types:
                                      1. net-default    - connects to a default network interface with Internet
                                                          access. Usually it's eth0, wlan0, or enp34s0
                                      2. net-host       - uses $VIRTUAL_BRIDGE_NAME bridge (analog of docker0)
                                      3. net-disabled   - run with disabled networking. Network namespace
                                                          remains isolated.

        Example: poc run net-default test0 echo hello
                 poc run net-host test0 bash
                 poc run net-disabled test0 \"mount && ls /proc && echo && ls /sys && whoami\"

    list, ls                        - List container name, corresponding loop device, mountpoint, and status
        Example: poc ls
                 poc list

    remove, rm <name>               - Remove container by its name. Container MUST BE STOPPED before removal
        Example: poc rm test0
                 poc remove test0

    help, --help                    - Print this help message
        Example: poc help
                 poc --help"
}

case $1 in
    "init"                  )   prepare_project         ;;
    "prune"                 )   remove_project          ;;
    "build"                 )   setup_loop_fs "${@:2}"  ;;
    "run"                   )   run_container "${@:2}"  ;;
    "list"   | "ls"         )   list_filesystem         ;;
    "remove" | "rm"         )   remove_loop_fs $2       ;;
    "help"   | "--help" | * )   print_help              ;;
esac
