#!/bin/bash

if [[ $EUID -ne 0 ]]; then
    echo "You must be root to run poc"
    exit 1
fi

PROJECT_PATH=/var/lib/poc_container

IMAGES_PATH=$PROJECT_PATH/overlay
MOUNTPOINTS_PATH=$PROJECT_PATH/mnt

ROOTFS_ARCHIVE_PATH=$PROJECT_PATH/rootfs.tar

IFACE=pocbr0
HOST_IP="10.200.1.1"

build_rootfs_archive () {
    local image_name=$(whoami)/ubuntu_sysbench

    # Build docker image with included sysbench
    docker build ./ -t $image_name

    # Get image id
    local format="{{.Repository}} {{.ID}}"
    local image_id=$(docker images --format="$format" | grep $image_name | awk '{print $2}')

    # Export rootfs to archive
    local container_id=$(docker create $image_id)
    docker export $container_id -o $ROOTFS_ARCHIVE_PATH

    # Remove image and container
    docker container rm $container_id
    docker image rm $image_id
}

setup_iface () {
    ip link add $IFACE type bridge
    ifconfig $IFACE $HOST_IP up

    local default_iface=$(route | grep "^default" | grep -o '[^ ]*$')
    ip link set $default_iface master $IFACE
}

remove_iface () {
    ifconfig $IFACE $HOST_IP down
    ip link del $IFACE
}

prepare_project () {
    mkdir -p $PROJECT_PATH $IMAGES_PATH $MOUNTPOINTS_PATH
    build_rootfs_archive
    setup_iface
}

setup_loop_fs () {
    local image_path=$IMAGES_PATH/$1.img
    local mountpoint_path=$MOUNTPOINTS_PATH/$1
    local size=10G

    if [[ -z $1 ]]; then
        echo "Invalid image/container name: '$1'"
        return
    fi

    if [[ -f $image_path ]]; then
        echo "Image/container '$1' already exists"
        return
    fi

    # Create an empty file which will be associated with loop device
    fallocate -l $size $image_path

    # Create a loop device
    loop_device=$(losetup -fP --show $image_path)

    # Create EXT4 filesystem inside the loop device
    mkfs.ext4 $loop_device &> /dev/null

    # Mount loop device
    mkdir -p $mountpoint_path
    mount -t ext4 $loop_device $mountpoint_path

    # Copy rootfs contents to mountpoint
    tar -xf $ROOTFS_ARCHIVE_PATH -C $mountpoint_path
}

remove_loop_fs () {
    local image_path=$IMAGES_PATH/$1.img
    local mountpoint_path=$MOUNTPOINTS_PATH/$1

    if [[ ! -f $image_path ]]; then
        echo "No image/container '$1' exists"
        return
    fi

    # Get loop device by image name
    # Cuts '/dev/loop0' from '/dev/loop0: []: (/var/lib/poc_container/overlay/test_loop.img)'
    loop_device=$(losetup -j $image_path | awk -F: '{print $1}')

    # Umount and remove loop device
    umount $loop_device
    losetup -D $loop_device

    rm -rf $image_path $mountpoint_path
    echo "Removed: $1"
}

remove_project () {
    local entries=( $(ls $MOUNTPOINTS_PATH) )

    for entry in "${entries[@]}"; do
        remove_loop_fs $(basename $entry)
    done

    rm -rf $PROJECT_PATH
    remove_iface
}

list_filesystem () {
    local entries=( $(ls $MOUNTPOINTS_PATH) )

    local content="NAME DEVICE MOUNTPOINT"

    for entry in "${entries[@]}"; do
        entry=$(basename $entry)

        local image_path=$IMAGES_PATH/$entry.img
        local loop_device=$(losetup -j $image_path | awk -F: '{print $1}')
        local mountpoint=$MOUNTPOINTS_PATH/$entry

        local line=$(echo -e "$entry $loop_device $mountpoint")
        content="$content\n$line"
    done

    echo -e $content | column -t
}

run_container () {
    local image_path=$IMAGES_PATH/$1.img
    local mountpoint_path=$MOUNTPOINTS_PATH/$1

    if [[ -z $1 ]]; then
        echo "Invalid image/container name: '$1'"
        return
    fi

    if [[ ! -f $image_path ]]; then
        echo "Image '$1' does not exist"
        return
    fi

    if [[ ! -d $mountpoint_path ]]; then
        echo "Container '$1' does not exist"
        return
    fi

    local cmd="${@:2}"

    local veth="veth0_$1"
    local vpeer="vpeer1_$1"
    local network_ns_name="netns_$1"

    # local veth_addr="10.200.1.1"
    local veth_addr=$HOST_IP
    local vpeer_addr="10.200.1.2"

    # Create network namespace
    ip netns add $network_ns_name

    # Create veth-vpeer linkage
    ip link add $veth type veth peer name $vpeer

    # Set up isolated network namespace for vpeer
    ip link set $vpeer netns $network_ns_name

    # Setup $veth IP
    ip addr add $veth_addr/24 dev $veth
    ip link set $veth up

    # Setup $vpeer IP and route
    ip netns exec $network_ns_name ip addr add $vpeer_addr/24 dev $vpeer

    # Set up interfaces in isolated network namespace
    ip netns exec $network_ns_name ip link set lo up
    ip netns exec $network_ns_name ip link set $vpeer up

    # Set up routing in isolated network namespace
    ip netns exec $network_ns_name ip route add default via $veth_addr

    # Enable IP-forwarding
    echo 1 > /proc/sys/net/ipv4/ip_forward
    
    # Enable masquerading
    iptables -t nat -F
    iptables -t nat -A POSTROUTING -s $vpeer_addr/24 -o $IFACE -j MASQUERADE
    
    # Set up NAT forwarding
    iptables -P FORWARD DROP
    iptables -F FORWARD
    iptables -A FORWARD -i $IFACE -o $veth -j ACCEPT
    iptables -A FORWARD -o $IFACE -i $veth -j ACCEPT

    # Set up DNS
    echo "nameserver 8.8.8.8" > $mountpoint_path/etc/resolv.conf

    # Build container command with proc and sys mounts
    local set_path="export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    local mount_proc="mount -t proc proc /proc"
    local mount_sys="mount -t sysfs sys /sys"
    local container_cmd="$set_path ; $mount_proc && $mount_sys && $cmd"

    # Create a cgroup with default settings
    local cgroups="cpu,memory"
    cgcreate -g "$cgroups:$1"

    # Run container
    cgexec -g "$cgroups:$1" \
        ip netns exec $network_ns_name \
        unshare --fork --mount --pid --ipc --mount-proc \
        chroot $mountpoint_path /bin/bash -c "$container_cmd" || true

    echo "Container '$1' exited. Cleanup"

    # Cleanup
    cgdelete "$cgroups:$1"
    ip link del dev $veth
    ip netns del $network_ns_name
}

print_help () {
    echo -e \
"Usage:  poc COMMAND [ARG...]

\"Proof Of \e[9mConcept\e[0m Container\" runtime written in Bash.
Author: dmfrpro <Dmitrii Alekhin>

COMMANDS:
    init                - Initialize the project directories and pull base rootfs image
        Example: poc init

    prune               - Remove everything and uninstall
        Example: poc prune

    build <name>        - Build (but not start) named container of disk size 10G
        Example: poc build my_test_container

    run <name> <cmd...> - Run a command inside a container (need to build it for the first time)
        Example: poc run my_test_container echo hello
                 poc run my_test_container bash
                 poc run my_test_container \"mount && ls /proc && echo && ls /sys && whoami\"

    list, ls            - List container name, corresponding loop device, and mountpoint
        Example: poc ls
                 poc list

    remove, rm <name>   - Remove container by its name
        Example: poc rm my_test_container
                 poc remove my_test_container

    help, --help        - Print this help message
        Example: poc help
                 poc --help"
}

case $1 in
    "init"                  )   prepare_project         ;;
    "prune"                 )   remove_project          ;;
    "build"                 )   setup_loop_fs $2        ;;
    "run"                   )   run_container "${@:2}"  ;;
    "list"   | "ls"         )   list_filesystem         ;;
    "remove" | "rm"         )   remove_loop_fs $2       ;;
    "help"   | "--help" | * )   print_help              ;;
esac
